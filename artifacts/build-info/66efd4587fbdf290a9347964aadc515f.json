{
  "id": "66efd4587fbdf290a9347964aadc515f",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.5",
  "solcLongVersion": "0.7.5+commit.eb77ed08",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/dependencies/authorization-platform/contracts/dependencies/holyzeppelin/contracts/security/datatypes/RoleManager.sol": {
        "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\n// import \"../../dataTypes/collections/AddressSet.sol\";\r\n\r\n// TODO: Documentation\r\n// TODO: RoleManager - approved bool should be a struct containing data about who approved etc. for more information.\r\n// TODO: Look into Address/Bytes32 sets -> replace with new structure if unnecessary. Fuck loops if we can use mappings and keep a counter\r\nlibrary RoleManager {\r\n\r\n    // using AddressSet for AddressSet.Set;\r\n    // using Bytes32Set for Bytes32Set.Set;\r\n\r\n    // struct Role {\r\n    //     bytes32 admin;\r\n    //     bytes32 approver;\r\n    //     AddressSet.Set members;\r\n    //     Bytes32Set.Set restrictedRoles;\r\n    //     mapping(address => bool) approved;\r\n    // }\r\n    \r\n    // // TODO: What else can I redesign?\r\n    // struct Account {\r\n    //     mapping(bytes32 => bool) roles;\r\n    // }\r\n\r\n    // struct ContractRoles {\r\n    //     bytes32 root;\r\n    //     mapping(address => Account) accounts;\r\n    //     mapping(bytes32 => Role) roles;\r\n    // }\r\n    \r\n    // function registerRole( Role storage self, bytes32 role, address rootAccount ) internal {\r\n    //     self.admin = role;\r\n    //     self.members.add( rootAccount );\r\n    //     self.approved[rootAccount] = true;\r\n    // }\r\n    \r\n    // // TODO: This shit is retarded. Why can I not just access the (add etc.) function directly in the Datastore contract even if it is public in the AddressSet library?\r\n    // function assignRole( Role storage self, address member ) internal {\r\n    //     self.members.add( member );\r\n    // }\r\n    \r\n    // function removeRole( Role storage self, address member ) internal {\r\n    //     self.members.remove( member );\r\n    // }\r\n    \r\n    // function addRestrictedRole( Role storage self, bytes32 role ) internal {\r\n    //     self.restrictedRoles.add( role );\r\n    // }\r\n    \r\n    // function removeRestrictedRole( Role storage self, bytes32 role ) internal {\r\n    //     self.restrictedRoles.remove( role );\r\n    // }\r\n    \r\n    // function memberCount( Role storage self ) internal view returns ( uint256 ) {\r\n    //     return self.members.length();\r\n    // }\r\n    \r\n    // function restrictedCount( Role storage self ) internal view returns ( uint256 ) {\r\n    //     return self.restrictedRoles.length();\r\n    // }\r\n    \r\n    // function getMember( Role storage self, uint256 index ) internal view returns ( address ) {\r\n    //     return self.members.at( index );\r\n    // }\r\n    \r\n    // function getRestrictedRole( Role storage self, uint256 index ) internal view returns ( bytes32 ) {\r\n    //     return self.restrictedRoles.at( index );\r\n    // }\r\n    \r\n    // function isMember( Role storage self, address member ) internal view returns ( bool ) {\r\n    //     return self.members.contains( member );\r\n    // }\r\n    \r\n    // function createRole( Role storage self, bytes32 admin, bytes32 approver ) internal {\r\n    //     self.admin = admin;\r\n    //     self.approver = approver;\r\n    // }\r\n\r\n}\r\n\r\n\r\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/dependencies/authorization-platform/contracts/dependencies/holyzeppelin/contracts/security/datatypes/RoleManager.sol": {
        "RoleManager": {
          "abi": [],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207d3f7a555d62f0c188308c80b213107c3747b740520535467e1d4e4d5a1504a064736f6c63430007050033",
              "opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0x3F7A555D62F0C188308C80B213107C3747B740520535467E1D4E4D5A1504 LOG0 PUSH5 0x736F6C6343 STOP SMOD SDIV STOP CALLER ",
              "sourceMap": "415:2574:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207d3f7a555d62f0c188308c80b213107c3747b740520535467e1d4e4d5a1504a064736f6c63430007050033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0x3F7A555D62F0C188308C80B213107C3747B740520535467E1D4E4D5A1504 LOG0 PUSH5 0x736F6C6343 STOP SMOD SDIV STOP CALLER ",
              "sourceMap": "415:2574:0:-:0;;;;;;;;"
            },
            "methodIdentifiers": {}
          }
        }
      }
    },
    "sources": {
      "contracts/dependencies/authorization-platform/contracts/dependencies/holyzeppelin/contracts/security/datatypes/RoleManager.sol": {
        "ast": {
          "absolutePath": "contracts/dependencies/authorization-platform/contracts/dependencies/holyzeppelin/contracts/security/datatypes/RoleManager.sol",
          "exportedSymbols": {
            "RoleManager": [
              2
            ]
          },
          "id": 3,
          "license": "AGPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "0.7",
                ".5"
              ],
              "nodeType": "PragmaDirective",
              "src": "47:22:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 2,
              "linearizedBaseContracts": [
                2
              ],
              "name": "RoleManager",
              "nodeType": "ContractDefinition",
              "nodes": [],
              "scope": 3,
              "src": "415:2574:0"
            }
          ],
          "src": "47:2948:0"
        },
        "id": 0
      }
    }
  }
}
